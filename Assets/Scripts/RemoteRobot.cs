using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Threading.Tasks;
using System;

public class Acuator
{
    private static Task lastTask;
    private const string HEAD = "EE";
    private const string END = "ED";
    private static Network network;
    private static readonly byte[] chCRCHTable =                                 // CRC 高位字节值表
    {
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40
    };
    private static readonly byte[] chCRCLTable =                                 // CRC 低位字节值表
    {
        0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7,
        0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,
        0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9,
        0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
        0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
        0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
        0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D,
        0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
        0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF,
        0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
        0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1,
        0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
        0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB,
        0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
        0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
        0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
        0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97,
        0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,
        0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89,
        0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
        0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
        0x41, 0x81, 0x80, 0x40
    };

    // 执行器的id
    private string id;
    public string Id
    {
        get { return id; }
        set { id = value; }
    }

    private bool enabled;
    public bool Enabled
    {
        get { return enabled; }
        set { enabled = value; }
    }

    private string mode;
    public string Mode
    {
        get { return mode; }
        set { mode = value; }
    }

    public Acuator(string _id)
    {
        id = _id;
        Debug.Log($"成功创建Id为{id}的执行器对象");
        enabled = false;
        mode = string.Empty;
    }

    static Acuator()
    {
        network = GameObject.Find("Console").GetComponent<Network>();
        lastTask = Task.Delay(0);
    }

    private static string getCRC(string data, int dataLen)
    {
        byte chCRCHi = 0xFF; // 高CRC字节初始化
        byte chCRCLo = 0xFF; // 低CRC字节初始化
        int wIndex;            // CRC循环中的索引
        byte[] bytes = network.hexStr2Bytes(data);
        for (int i = 0; i < dataLen; i++)
        {
            // 计算CRC
            wIndex = chCRCHi ^ bytes[i];
            chCRCHi = (byte)(chCRCLo ^ chCRCHTable[wIndex]);
            chCRCLo = chCRCLTable[wIndex];
        }
        byte[] bytesCRC = { chCRCHi, chCRCLo };
        string[] splitCRC = BitConverter.ToString(bytesCRC).Split('-');
        return splitCRC[0] + splitCRC[1];
    }

    public void enable()
    {
        Task T = lastTask.ContinueWith(antecedent =>
        {
            string command = "2A";
            string dataLength = "0001";
            string data = "01";
            string CRC = getCRC(data, 1);
            string msg = $"{HEAD}{id}{command}{dataLength}{data}{CRC}{END}";
            network.sendMsg(msg);
            string[] msgRecv = network.recvMsg();
            network.WaitForMsg = false;

            string dataRecv = msgRecv[5];
            if (dataRecv == "01")
            {
                Enabled = true;
                Debug.Log($"执行器{id}使能成功");
            }
            else
            {
                Enabled = false;
                Debug.Log($"执行器{id}使能失败");
            }
        });
        lastTask = T;
    }

    public void setTrapePositionMode()
    {
        Task T = lastTask.ContinueWith(antecedent =>
        {
            string command = "07";
            string dataLength = "0001";
            string data = "06";
            string CRC = getCRC(data, 1);
            string msg = $"{HEAD}{id}{command}{dataLength}{data}{CRC}{END}";
            network.sendMsg(msg);
            string[] msgRecv = network.recvMsg();
            network.WaitForMsg = false;

            string dataRecv = msgRecv[5];
            if (dataRecv == "01")
            {
                mode = "TrapePosition";
                Debug.Log($"执行器{id}设置梯形位置模式成功");
            }
            else
            {
                Debug.Log($"执行器{id}设置梯形位置模式失败");
            }
        });
        lastTask = T;
    }
}

public class RemoteRobot : MonoBehaviour
{
    Network network;
    Acuator[] acuators;

    private void Start()
    {
        network = GameObject.Find("Console").GetComponent<Network>();
        new Acuator("0");   // 调用静态构造函数
        connect();
    }

    private void Update()
    {

    }


    private void connect()
    {
        Task.Run(() =>
        {
            network.sendMsg("EE00440000ED");
            try
            {
                string[] msgRecv = network.recvMsg();
                network.WaitForMsg = false;
                if (msgRecv[5] == "01")
                {
                    Debug.Log("连接成功");
                    acuators = new Acuator[5];
                    network.sendMsg("EE00020000ED");
                    for (int i = 0; i < 5; i++)
                    {
                        msgRecv = network.recvMsg();
                        string id = msgRecv[1];
                        acuators[i] = new Acuator(id);
                    }
                    network.WaitForMsg = false;

                    foreach (Acuator acuator in acuators)
                    {
                        acuator.enable();
                        // acuator.setTrapePositionMode();
                    }
                }
                else
                {
                    throw new TimeoutException("连接超时");
                }
            }
            catch (Exception e)
            {
                Debug.Log(e.Message);
            }
        });
    }
}
